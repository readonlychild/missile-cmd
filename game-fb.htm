<html>
<head>
    <script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js"></script>
    <script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js"></script>
	<script type="text/javascript" src="canvas-utils.js"></script>
    <link rel="stylesheet" href="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/themes/ui-lightness/jquery-ui.css" />
    <link rel="stylesheet" href="style.css" />
	<script type="text/javascript" src="jquery.hotkeys.js"></script>
	<script type="text/javascript" src="moment.min.js"></script>
</head>
<body>
	<div style="width:890px; margin:0 auto;">
	<!-- <h3>Leaderboard</h3>  -->
	<div id="leaderboard-score"></div>

	<!--<img src='resources/logo.png' style="float:left;" />-->
	<div id="game-div" style="">
		
		<div class="game-layer" id="bg-espacio"></div>
		<div class="game-layer" id="bg-aurora"></div>
		<div class="game-layer" id="bg-estrellas"></div>
		<div class="game-layer" id="bg-suelo"></div>
		<div class="game-layer" id="bg-planeta"></div>
		<div class="game-layer" id="bg-nubes"></div>
		
		<canvas id="canvas-10" width="600" height="600" style="position:absolute;"></canvas>
		<div class="layer-dash" id="bg-dashboard">
		</div>
		<canvas id="canvas-20" width="600" height="600" style="position:absolute;"></canvas>

		<div class="layer-dash">
			<div style="padding:5px;">
				<span id="btn-nw" ></span>
			</div>
		</div>
		
	</div>

	<div id="leaderboard-wave"></div>
	<br/>
	
	<div style="width:600px;margin:0 140px;">
		<div style="clear:both;" ></div>
        <div class="actionbar ui-corner-all">
            <span class="btn ui-corner-all" id="action-nextWave">Next Wave</span> 
			<span class="btn ui-corner-all powerup" id="action-powerup-explosion">explosion x4</span> 
			<span class="btn ui-corner-all" id="action-postScore" style="display:none;">Post Score to Leaderboard</span>
        </div>
        waveCount: <span id="lbl-waveCount">0</span>  | 
        donutHealth: <span id="lbl-missileHealth">?</span>  | 
		explosionRadius: <span id="lbl-explosionRadius">?</span>  | 
	</div>
	
	<div id="fb-root">
		<span id="fb-me-pic"></span>
		<fb:like href="https://apps.facebook.com/ddestroyer/" send="false" width="450" show_faces="true"></fb:like>
	</div>
    </div>
<script type="text/javascript">
	var _fps = 30;				// frames per second
	var ctx, WIDTH, HEIGHT;
	var ctxCities;
	var player;
	var _gamevars = {
		waveCount: 0,
		explosion: { radius: 80 },
		missile: {
			health: 1,
			radius: 5
		},
		score: 0,
		gameover: false,
		powerUps: {
			explosion: {
				multiply: 1
			}
		}
	};
	_explosions4pointMark = 4000;
	
	var _missiles = [];
	var _bullets  = [];
	var _explosions = [];
	var _cities = [];
	var _textScrollers = [];
	var _powerups = [];
	
	$(document).ready(function () {
		
		//get leaderboard(s) score
		$.ajax({
			url: "https://missile-cmd.herokuapp.com/leaderboard/missile-cmd.score",
			type: "GET",
			success: function (data) {
				var htm = "";
				htm += "<ul class='leaderboard'>";
				for (var i = 0, z = data.length; i < z; i++) {
					htm += "<li>";
					htm += "<img src='//graph.facebook.com/" + data[i].userId + "/picture' height='32' style='float:left;' />";
					htm += "SCORE: " + data[i].score + "<br/>";
					htm += "<span style='font-size:8pt;color:#ccc;'>" + moment(data[i].created).fromNow() + "</span>";
					htm += "</li>";
				}
				htm += "</ul>";
				$("#leaderboard-score").html(htm);
			}
		});

		//get leaderboard(s) waves
		$.ajax({
			url: "https://missile-cmd.herokuapp.com/leaderboard/missile-cmd.wave",
			type: "GET",
			success: function (data) {
				var htm = "";
				htm += "<ul class='leaderboard'>";
				for (var i = 0, z = data.length; i < z; i++) {
					htm += "<li>";
					htm += "<img src='//graph.facebook.com/" + data[i].userId + "/picture' height='32' style='float:left;' />";
					htm += "WAVE: " + data[i].score + "<br/>";
					htm += "<span style='font-size:8pt;color:#ccc;'>" + moment(data[i].created).fromNow() + "</span>";
					htm += "</li>";
				}
				htm += "</ul>";
				$("#leaderboard-wave").html(htm);
			}
		});

		$.getScript('//connect.facebook.net/en_US/all.js', function () {
		    FB.init({
		      appId: '254664967987502',
		      channelUrl: '//missile-cmd.herokuapp.com/channel.html',
		      xfbml: true
		    });     
		    //$('#loginbutton,#feedbutton').removeAttr('disabled');
		    FB.getLoginStatus(function (data) {
		    	console.log('getLoginStatus', data);
		    	if (data.status == 'connected') {
		    		FB.meta = { uid: data.authResponse.userID, accessToken: data.authResponse.accessToken };
		    		$("#fb-me-pic").html("<img src='//graph.facebook.com/" + FB.meta.uid + "/picture' height='40' />");
		    	} else {
		    		FB.login(function (data) {
		    			if (response.authResponse) {
		    				log.console(response);
		    				FB.meta = { uid: data.authResponse.userID, accessToken: data.authResponse.accessToken };
		    			} else {
		    				FB.meta = { uid: 'anonymous', accessToken: 'none' };
		    			}
		    		});
		    	}
		    });
		  });

		$("#action-postScore").bind("click", function () {
			//alert('not implemented yet; refresh page to start again.');
			
		});
		
		$("#action-powerup-explosion").bind("click", function () {
			_powerups.push(new PowerUp({ ttl: { original:700, value:700 }, pointValue:_explosions4pointMark, enhance:4 }));
		});
		
		ctx = document.getElementById("canvas-20").getContext("2d");
		ctxCities = document.getElementById("canvas-10").getContext("2d");
		WIDTH = ctx.canvas.width;
		HEIGHT = ctx.canvas.height;
		
		player = new Player({});
		
		initializeCities();
		
        //initial screen messages
        _textScrollers.push(new TextScroller({ text: "INSTRUCTIONS", fontSize:20, y:180, speed:40, waitFrames:420, waitAt:218, color:"#080" }));
        _textScrollers.push(new TextScroller({ text: "Click 'Next Wave' below to get some donuts...", fontSize:26, y:220, speed:40, waitFrames:720, waitAt:10 }));
        _textScrollers.push(new TextScroller({ text: "Click on the dark sky to fire at them :)", fontSize:16, y:250, speed:40, waitFrames:600, waitAt:140, color:"#f77" }));
        _textScrollers.push(new TextScroller({ text: "Protect your Golems ", fontSize:13, y:270, speed:90, waitFrames:410, waitAt:160, color:"#a77" }));
		
		$("#canvas-20").bind("mousemove", function (e) {
			//console.log(e);
			player.mouseInfo.x = e.offsetX;
			player.mouseInfo.y = e.offsetY;
		});
		
		$("#canvas-20").bind("click", function () {
			player.shoot(ctx);
		});
		
		$("#action-nextWave, #btn-nw").bind("click", function () {
			_gamevars.waveCount++;
			_gamevars.score += 200;
			var missiles = 4 + Math.floor(_gamevars.waveCount / 9);
			if (_gamevars.waveCount % 3 == 0) {
				_gamevars.missile.health += 2;
			}
			newWave(missiles, _gamevars.missile.health, _gamevars.missile.radius);
			$("#lbl-waveCount").text(_gamevars.waveCount);
			$("#lbl-missileHealth").text(_gamevars.missile.health);
			$("#lbl-explosionRadius").text(_gamevars.explosion.radius);
			_gamevars.explosion.radius -= 2;
			if (_gamevars.explosion.radius < 40) _gamevars.explosion.radius = 40;
			
			_textScrollers.push(new TextScroller({ text: "Wave "+_gamevars.waveCount, fontSize:32, y:520, speed:40 }));
			
		});
		
		setTimeout(function () {
			gameLoop();
		}, 1000/_fps);
		
	});
	
	function postScores() {
		$.ajax({
			url: "https://missile-cmd.herokuapp.com/leaderboard/add/missile-cmd.score/" + FB.meta.uid + "/" + _gamevars.score,
			type: 'GET',
			success: function (data) { }
		});
		$.ajax({
			url: "https://missile-cmd.herokuapp.com/leaderboard/add/missile-cmd.wave/" + FB.meta.uid + "/" + _gamevars.waveCount,
			type: 'GET',
			success: function (data) { }
		});
		$("#action-postScore").hide();
	};

	function gameLoop() {
		if (_gamevars.gameover) {
			$("#action-nextWave").hide();
			//$("#action-postScore").show();
			ctx.fillStyle = "#f72";
			text(ctx, "GAME OVER", 225, 250, 54);
			ctx.fillStyle = "#777";
			text(ctx, "YOUR SCORE:", 250, 285, 24);
			ctx.fillStyle = "#abd";
			text(ctx, _gamevars.score, 436, 290, 44);
			postScores();
			return;
		}
		clearCanvas();
		updateUI();
		update();
		draw();
		setTimeout(function() { gameLoop(); }, 1000/_fps);
	}
	
	function clearCanvas() {
		ctx.clearRect(0, 0, WIDTH, HEIGHT);
		ctxCities.clearRect(0, 0, WIDTH, HEIGHT);
	}
	
	function update() {
		if (_gamevars.gameover) return;
		player.update();
		
		_powerups.forEach(function (power) {
			power.update();
		});
		_powerups = _powerups.filter(function (power) {
			return !power.dead;
		});
		
		_missiles.forEach(function (missile) {
			missile.update();
		});
		_missiles = _missiles.filter(function (missile) {
			return !missile.dead;
		});
		
		_bullets.forEach(function (bullet) {
			bullet.update();
		});
		_bullets = _bullets.filter(function (bullet) {
			return !bullet.dead;
		});
		
		_explosions.forEach(function (explosion) {
			explosion.update();
		});
		_explosions = _explosions.filter(function (explosion) {
			return !explosion.dead;
		});
		
		var gameIsOver = true;
		_cities.forEach(function (city) {
			city.update();
			if (city.isAlive) gameIsOver = false;
		});
		if (gameIsOver) {
			_gamevars.gameover = true;
		}
		
		_textScrollers.forEach(function (scroller) {
			scroller.update();
		});
		_textScrollers = _textScrollers.filter(function (scroller) {
			return !scroller.dead;
		});
		
		handleCollisions();
	}
	
	function draw() {
		if (_gamevars.gameover) return;
		player.draw(ctx);
		
		_powerups.forEach(function (power) {
			power.draw(ctxCities);
		});
		
		_missiles.forEach(function (missile) {
			missile.draw(ctx);
		});
		
		_bullets.forEach(function (bullet) {
			bullet.draw(ctx);
		});
		
		_explosions.forEach(function (explosions) {
			explosions.draw(ctx);
		});
		
		// can be in another loop
		_cities.forEach(function (city) {
			city.draw(ctxCities);
		});
		
		_textScrollers.forEach(function (scroller) {
			scroller.draw(ctxCities);
		});
		
		ctx.fillStyle = "#f72";
		text(ctx, "" + _gamevars.score, 132, 25, 16);
		text(ctx, "" + _gamevars.waveCount, 236, 25, 16);
		
	}
	
	function updateUI() {
		$(".powerup").hide();
		if (_gamevars.score >= _explosions4pointMark) {
			$("#action-powerup-explosion").show();
            //_textScrollers.push(new TextScroller({ text: "Explosion PowerUp available (x4)", fontSize:12, y:270, speed:70, waitFrames:40, waitAt:500, color:"#531" }));
		}

		var parallaxNumber = (Math.round((WIDTH/2 - player.mouseInfo.x) * 100 / (WIDTH/2)) * 1 - 100);
		//text(ctx, "m.x: " + parallaxNumber, 20, 33);

		$("#bg-nubes").css("background-position", (parallaxNumber /4 ) + "px bottom");
		$("#bg-estrellas").css("background-position", (parallaxNumber /10 ) + "px bottom");
		$("#bg-aurora").css("background-position", (parallaxNumber /15 ) + "px bottom");
		$("#bg-planeta").css("background-position", (parallaxNumber /20 ) + "px bottom");
	}
	
</script>
	
<script type="text/javascript">
	
	//_______________PLAYER______________________
	function Player(o) {
		var o = o || {};
		o.x = WIDTH / 2;
		o.y = HEIGHT - 40;
		o.mouseInfo = { x:0, y:0 };
		o.angleInfo = { x:1, y:1 };
		o.update = function () {
		
		};
		o.draw = function (ctx) {
			ctx.strokeStyle = "#300";
			lineTo(ctx, this.x, this.y, this.mouseInfo.x, this.mouseInfo.y);
			ctx.save();
			
			var opp = Math.abs(this.y - this.mouseInfo.y);
			var adj = Math.abs(this.x - this.mouseInfo.x);
			
			this.angleInfo.x = this.mouseInfo.x - this.x;
			this.angleInfo.y = this.mouseInfo.y - this.y;
			this.angleInfo.x *= 0.1;
			this.angleInfo.y *= 0.1;
			
			var a = Math.atan(adj/opp); // 
			if (this.x - this.mouseInfo.x > 0) {
				opp = Math.abs(this.y - this.mouseInfo.y);
				adj = Math.abs(this.x - this.mouseInfo.x);
				a = Math.atan(opp/adj) - Math.PI*0.5;
			}
			ctx.translate(this.x, this.y);
			ctx.rotate(a);
			ctx.fillStyle = "#447";
			//rect(ctx, -4, 10, 8, -30);
			drawSpriteFrame(ctx, CANNON.resources.cannon, 1, 0, 0, 0, 0, 1, 0, -25);
			ctx.restore();
			drawSpriteFrame(ctx, CANNON.resources.base, 1, 0, this.x, this.y, 0, 1, 1, 15);
			
			this.drawCrosshair(ctx);
		};
		o.drawx = function (ctx) {
			ctx.strokeStyle = "#300";
			lineTo(ctx, this.x, this.y, this.mouseInfo.x, this.mouseInfo.y);
			ctx.save();
			
			var opp = Math.abs(this.y - this.mouseInfo.y);
			var adj = Math.abs(this.x - this.mouseInfo.x);
			
			this.angleInfo.x = this.mouseInfo.x - this.x;
			this.angleInfo.y = this.mouseInfo.y - this.y;
			this.angleInfo.x *= 0.1;
			this.angleInfo.y *= 0.1;
			
			var a = Math.atan(adj/opp); // 
			if (this.x - this.mouseInfo.x > 0) {
				opp = Math.abs(this.y - this.mouseInfo.y);
				adj = Math.abs(this.x - this.mouseInfo.x);
				a = Math.atan(opp/adj) - Math.PI*0.5;
			}
			ctx.translate(this.x, this.y);
			ctx.rotate(a);
			ctx.fillStyle = "#447";
			rect(ctx, -4, 10, 8, -30);
			ctx.restore();
			
			this.drawCrosshair(ctx);
		};
		o.drawCrosshair = function (ctx) {
			ctx.strokeStyle = "#840";
			ctx.beginPath();
			ctx.arc(this.mouseInfo.x, this.mouseInfo.y, 12, 0, Math.PI*2, true);
			ctx.closePath();
			ctx.stroke();
			ctx.beginPath();
			ctx.arc(this.mouseInfo.x, this.mouseInfo.y, 8, 0, Math.PI*2, true);
			ctx.closePath();
			ctx.stroke();
		};
		o.shoot = function (ctx) {
			_bullets.push (new Bullet({ destination: { x: this.mouseInfo.x, y: this.mouseInfo.y } }));
			_gamevars.score -= 1;
		};
		return o;
	}
	
	//____________________BULLET_______________
	// expects an object with destination.x and destination.y
	function Bullet(c) {
		var o = c || {};
		o.speed = 7;
		o.x = WIDTH / 2;
		o.y = HEIGHT - 40;
		o.width = 2;
		o.height = 2;
		o.destination.x = c.destination.x || 0;
		o.destination.y = c.destination.y || 0;
		
		o.powerUpExplosionMultiplier = _gamevars.powerUps.explosion.multiply;
		
		o.angleInfo = {};
		o.angleInfo.x = o.destination.x - o.x;
		o.angleInfo.y = o.destination.y - o.y;
		o.destination.distance = Math.sqrt(o.angleInfo.x * o.angleInfo.x + o.angleInfo.y * o.angleInfo.y);
		o.destination.progress = 0;
		if (o.destination.distance != 0) {
			o.xdelta = o.angleInfo.x /= o.destination.distance;
			o.ydelta = o.angleInfo.y /= o.destination.distance;
		} else {
			o.xdelta = 1;
			o.ydelta = 0;
		}
		
		o.dead = false;
		o.update = function () {
			if (this.dead) return;
			this.x += this.xdelta * this.speed;
			this.y += this.ydelta * this.speed;
			o.destination.progress += (this.xdelta * this.xdelta + this.ydelta * this.ydelta) * this.speed;
			if (this.x < 0) { this.dead = true; }
			if (this.y < 0) { this.dead = true; }
			if (this.x > WIDTH) { this.dead = true; }
			if (this.y > HEIGHT) { this.dead = true; }
			if (this.destination.progress >= this.destination.distance) {
				var expl = new Explosion({ x: this.x, y: this.y, r: _gamevars.explosion.radius * this.powerUpExplosionMultiplier });
				_explosions.push(expl);
				this.dead = true;
			}
		}
		o.draw = function (ctx) {
			ctx.fillStyle = "#f40";
			circle(ctx, this.x, this.y, 2);
		};
		return o;
	}
	
	//____________________EXPLOSION_______________
	var _explosionColors = ["rgba(255,150,40,0.4)","rgba(255,90,0,0.4)","rgba(255,0,0,0.4)","rgba(255,240,0,0.4)","rgba(25,150,66,0.4)",
							"rgba(110,0,0,0.4)"];
	var _currExplosionColor = 0;
	function Explosion(c) {
		var o = c || {};
		o.r = c.r || 25;
		o.speed = 1;
		o.width = o.r*2;
		o.height = o.r*2;
		o.dead = false;
		o.update = function () {
			this.r -= this.speed;
			this.width = this.r;
			this.height = this.r;
			this.speed++;
			this.dead = this.r <= 0;
		}
		o.draw = function (ctx) {
			if (this.dead) return;
			drawSpriteFrame(ctx, CANNON.resources.explosion, 1, 0, this.x, this.y, 0, this.r/40, 0, 0, 0.7);
		}
		o.drawx = function (ctx) {
			if (this.dead) return;
			_currExplosionColor++;
			if(_currExplosionColor >= _explosionColors.length) _currExplosionColor = 0;
			ctx.fillStyle = _explosionColors[_currExplosionColor];
			circle(ctx, this.x, this.y, this.r);
		}
		return o;
	}
	
	var _missileColors = [ "rgba(255,150,40,0.4)","rgba(255,90,0,0.4)","rgba(255,0,0,0.4)",
							"rgba(255,240,0,0.4)","rgba(25,150,66,0.4)","rgba(110,0,0,0.4)", 
						   	"rgba(255,90,40,0.4)","rgba(255,90,0,0.4)","rgba(255,0,130,0.4)",
						   	"rgba(110,90,0,0.4)","rgba(77,99,66,0.4)","rgba(110,0,0,0.4)" 
						  ];
	var _currMissileColor = 0;
	var _currMissileColorDelay = 0;
	function getMissileColor() {
		_currMissileColorDelay++;
		if (_currMissileColorDelay > 20) _currMissileColorDelay = 0;
		if (_currMissileColorDelay == 5) _currMissileColor++;
		if (_currMissileColor >= _missileColors.length) _currMissileColor = 0;
		return _missileColors[_currMissileColor];
	}

	//____________________MISSILE_______________
	function Missile(c) {
		var o = c || {};
		// default values
		o.origin = {};
		o.origin.x = c.x;
		o.origin.y = c.y;
		o.width = c.r*2;
		o.height = c.r*2;
		o.dead = false;
		o.update = function () {
			this.x += this.speedX * this.xdir;
			this.y += this.speedY * this.ydir;
			if (this.health <= 0) this.dead = true;
			
			if (this.x >= WIDTH) {
				this.xdir = -1; this.origin.y = this.y; this.origin.x = this.x; 
			}
			if (this.x <= 0) {
				this.xdir = 1; this.origin.y = this.y; this.origin.x = this.x; 
			}
			if (this.y >= HEIGHT) {
				_explosions.push(new Explosion({ x: this.x, y: this.y, r: 50 }));
				_gamevars.score -= 6;
				this.dead = true; this.ydir = -1; this.origin.y = this.y; this.origin.x = this.x; 
			}
			if (this.y <= 0) {
				this.ydir = 1; this.origin.y = this.y; this.origin.x = this.x; 
			}
			
		}
		o.draw = function (ctx) {
			if (this.dead) return;
			this.frame = this.frame || 0;
			this.frameTicks = this.frameTicks || 0;
			this.frameTicks += 1;
			if (this.frameTicks >= 3) {
				this.frameTicks = 0;
				this.frame == 0 ? this.frame = 1 : this.frame = 0;
			}
			var angle = getAngle(this.x, this.y, this.x-this.speedX * this.xdir, this.y-this.speedY); 
			drawSpriteFrame(ctx, MISSILE.resources.types[0].image, 2, this.frame, this.x, this.y, angle, 1);
			//circle(ctx, this.x - this.speedX * 7 * this.xdir, this.y - this.speedY * 7, 2);
		}
		o.drawx = function (ctx) {
			if (this.dead) return;
			ctx.strokeStyle = "#320";
			//lineTo(ctx, this.origin.x, this.origin.y, this.x, this.y);
			ctx.fillStyle = "#fb5";
			circle(ctx, this.x, this.y, this.r);
			ctx.fillStyle = "#000";
			if (this.health >= 15) ctx.fillStyle = "#f00";
			//if (this.health >= 20) ctx.fillStyle = "#fff";
			circle(ctx, this.x, this.y, this.r-2);
			if (this.health >= 5) {
				ctx.strokeStyle = "#fb5";
				circle(ctx, this.x, this.y, this.r+2, true);
				ctx.fillStyle = getMissileColor();
				circle(ctx, this.x - this.speedX * 7 * this.xdir, this.y - this.speedY * 7, 2);
			}
			if (this.health >= 10) {
				ctx.strokeStyle = "#fb5";
				circle(ctx, this.x, this.y, this.r+4, true);
			}
			if (this.health > 20) {
				ctx.fillStyle = getMissileColor();
				circle(ctx, this.x + this.speedX * 7 * this.xdir, this.y - this.speedY * 7, 2);
				circle(ctx, this.x + this.speedX * 7 * this.xdir, this.y + this.speedY * 7, 2);
				circle(ctx, this.x - this.speedX * 7 * this.xdir, this.y + this.speedY * 7, 2);
			}
		}
		
		return o;
	}
	
	function newWave(missileCount, missileHealth, missileRadius) {
        for (var i = 0; i < missileCount; i++) {
			var ball = {};
			ball.x = Math.floor(Math.random() * WIDTH + 1);
			ball.y = 0;
			ball.speedY = 1 + Math.random() * 0.5;
			ball.speedX = Math.random()*2;
			ball.xdir = (Math.random() > 0.5 ? 1 : -1);
			ball.ydir = 1;
			ball.health = missileHealth;
			ball.r = missileRadius;
            _missiles.push(new Missile(ball));   
        }
    }
	
	function handleCollisions() {
		_explosions.forEach(function (explosion) {
			_missiles.forEach(function (missile) {
				if (collides(missile, explosion)) {
					missile.health--;
					_gamevars.score += 1;
				}
			});
		});
		_missiles.forEach(function (missile) {
			_cities.forEach(function (city) {
				if (city.isAlive && collides(city, missile)) {
					city.isAlive = false;
					_explosions.push(new Explosion({ x: city.x + city.width/2, y: city.y + city.height/2, r: 80 }));
                    _textScrollers.push(new TextScroller({ text: "Golem down :( ", fontSize:48, y:400, speed:60, waitAt:90, color:"#333", waitFrames:40 }));
				}
			});
		});
	}
	
	function collides(a, b) {
		var bottom1, bottom2, left1, left2, right1, right2, top1, top2;
		left1 = a.x - a.width/2;
		right1 = a.x + a.width/2;
		top1 = a.y - a.height/2;
		bottom1 = a.y + a.height/2;
		left2 = b.x - b.width/2;
		right2 = b.x + b.width/2;
		top2 = b.y - b.height/2;
		bottom2 = b.y + b.height/2;
		return !( left1 > right2 || left2 > right1 || top1 > bottom2 || top2 > bottom1 );
		/*
		var w2 = b.width + b.x;
		var w1 = a.width + a.x;
		if (b.x > w1 || a.x > w2) return false;
		var h2 = b.height + b.y;
		var h1 = a.height + a.y;
		if (b.y > h1 || a.y > h2) return false;
		return true;
		*/
		/*
		return a.x < b.x + b.width &&
			   a.x + a.width > b.x &&
			   a.y < b.y + b.height &&
			   a.y + a.height > b.y;
		*/
	}
	
	var imgcannon = new Image();
	imgcannon.src = "resources/cannon.png";
	var imgcannonbase = new Image();
	imgcannonbase.src = "resources/base.png";
	var imgexplosion = new Image();
	imgexplosion.src = "resources/explosion.png";
	var CANNON = {
		resources: {
			cannon: imgcannon,
			base: imgcannonbase,
			explosion: imgexplosion
		}
	};

	var imgmissile0 = new Image();
	imgmissile0.src = "resources/missile.png";
	var MISSILE = {
		resources: {
			types: [
				{
					image: imgmissile0
				}
			]
		}
	};

	var imgcityalive = new Image();
	imgcityalive.onload = function () {
		CITY.width = this.width;
		CITY.height = this.height;
	};
	imgcityalive.src = "resources/city.png";
	var imgcitydead  = new Image();
	imgcitydead.src  = "resources/city-gone.png";
	var CITY = {
		resources: {
			alive: imgcityalive,
			dead:  imgcitydead
		}
	};
	
	//_____________________CITY_______________
	function City(c) {
		var o = c || {};
		o.isAlive = true;
		o.update = function () {
			this.width = CITY.width;
			this.height = CITY.height;
		};
		o.draw = function (ctx) {
			if (this.isAlive) {
				ctx.drawImage(CITY.resources.alive, this.x, this.y);
			} else {
				ctx.drawImage(CITY.resources.dead, this.x, this.y);
			}
		};
		return o;
	}
	
	function initializeCities() {
		var w = CITY.resources.alive.width;
		var h = CITY.resources.dead.height;
        var cityYoffset = -58;
		var city1 = new City({ x:50,   y:HEIGHT+cityYoffset, width:w, height:h });
		var city2 = new City({ x:100,  y:HEIGHT+cityYoffset+6, width:w, height:h });
		var city3 = new City({ x:150,  y:HEIGHT+cityYoffset, width:w, height:h });
		var city4 = new City({ x:400,  y:HEIGHT+cityYoffset+6, width:w, height:h });
    	var city5 = new City({ x:450,  y:HEIGHT+cityYoffset, width:w, height:h });
		var city6 = new City({ x:500,  y:HEIGHT+cityYoffset+6, width:w, height:h });
        
        _cities.push(city1);
		_cities.push(city2);
		_cities.push(city3);
		_cities.push(city4);
		_cities.push(city5);
		_cities.push(city6);
		
	}
	
	function TextScroller(c) { //expect .text .fontSize .color
		var o = c || {};
		o.x = -200;
		o.y = c.y || HEIGHT/2;
		o.color = c.color || "#fff";
		o.fontSize = c.fontSize || 15;
		o.waitFrames = c.waitFrames || 80;
		o.framesWaiting = 0;
		o.waitAt = c.waitAt || 400;
		o.speed = c.speed || 30;
		o.update = function () {
			if (this.x <= this.waitAt || this.framesWaiting >= this.waitFrames) {
				this.x += this.speed;
			} else {
				this.framesWaiting++;
			}
			//console.log(this.x, this.y, this.text);
			if (this.x > WIDTH + 50) {
				this.dead = true;
			}
		};
		o.draw = function (ctx) {
			ctx.fillStyle = this.color;
			text2(ctx, this.text, this.x, this.y, this.fontSize);
		};
		return o;
	}
	
	function PowerUp(c) {
		var o = c || {};
		o.code = c.code || "explosion-multiply";
		o.dead = false;
		o.pointValue = c.pointValue || 0;
		_gamevars.score -= o.pointValue;
		if (o.code == "explosion-multiply") _gamevars.powerUps.explosion.multiply = c.enhance || 2;
		o.ttl = c.ttl || { original: 1000, value: 1000 };
		o.update = function () {
			this.ttl.value -= 1;
			if (this.ttl.value <= 0) {
				this.dead = true;
				if (o.code == "explosion-multiply") _gamevars.powerUps.explosion.multiply = 1;
			}
		};
		o.draw = function (ctx) {
			var p = this.ttl.value *100 / this.ttl.original;
			ctx.fillStyle = "#900";
			rect(ctx, WIDTH/2-50, HEIGHT-10, p, 2);
		};
		return o;
	}

	function loadResources () {

	}
	
	function drawSpriteFrame (ctx, img, frameCount, currFrame, x, y, rotation, scale, xCenterOffset, yCenterOffset, alpha) {
		var w = img.width / frameCount;
		var h = img.height;
		var xoff = xCenterOffset || 0;
		var yoff = yCenterOffset || 0;
		alpha = alpha || 1;

		var sx = w * currFrame;

		ctx.save();
		ctx.translate(x, y);
		ctx.rotate(rotation);
		ctx.scale(scale, scale);
		ctx.globalAlpha = alpha;
		ctx.drawImage(img, sx, 0, w, h, -w/2 + xoff, -h/2 + yoff, w, h);
		ctx.restore();
	}

	function getAngle (x1, y1, x2, y2) {
		var a = Math.atan2(x2-x1, y1-y2);
		return a;
	}

</script>

	
</body>
</html>